{"version":3,"sources":["types.ts","constants.ts","theme.ts","components/Main.ts","components/Cell.ts","utils/getClearPaths.ts","utils/PriorityQueue.ts","utils/getNeighbors.ts","pathers/dijkstra.ts","utils/runPather.ts","utils.ts","components/BoardSection.ts","components/BoardRow.ts","components/SelectField.tsx","components/OptionsDialog/PatherOptions.tsx","components/OptionsDialog.tsx","components/SpeedDial.tsx","components/Board/handleNodeSelect.ts","components/Board/initBoard.ts","components/Board.tsx","utils/getBoardDimentions.ts","utils/range.ts","utils/getGrid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MODES","Pathers","MODE_TOGGLE_MAP","FILL_MODE","CLEAR_MODE","START_NODE_MODE","TARGET_NODE_MODE","PATH_NODE_MODE","DEFAULT_NODE_MODE","ENTERABLE_MODES","DRAGGABLE_MODES","theme","createMuiTheme","Main","styled","main","WINDOW_PADDING","palette","background","paper","Cell","div","mode","css","pathIndex","getClearPaths","grid","nextGrid","cloneDeep","flat","filter","node","forEach","x","y","index","PriorityQueue","collection","this","element","isEmpty","push","added","i","length","splice","shift","getValidNode","getNeighbors","unVisited","has","Boolean","dijkstra","startNode","endNode","flatGrid","Set","tentativeDistances","map","Infinity","trace","Map","queue","enqueue","shortestStep","dequeue","currentNode","currentNodeDistance","neighbor","newTentativeDistance","set","delete","path","lastStep","lastStepTrace","get","unshift","PATHER_MAP","Dijkstra","AStar","runPather","pather","setGrid","targetNode","pop","addEventListeners","eventNames","fn","e","addEventListener","BoardSection","section","BoardRow","SelectField","label","options","onChange","value","Autocomplete","fullWidth","getOptionLabel","option","renderInput","params","TextField","variant","margin","renderOption","inputValue","matches","match","parts","parse","part","key","style","fontWeight","highlight","text","_e","Menus","selectFieldOptions","Object","entries","PatherOptions","setOptions","find","useStyles","makeStyles","createStyles","appBar","position","title","marginLeft","spacing","flex","Transition","React","forwardRef","props","ref","Slide","direction","OptionsDialog","open","setOpen","classes","useState","speculativeOptions","setSpeculativeOptions","currentMenu","setCurrentMenu","handleClose","saveChanges","undefined","Dialog","fullScreen","onClose","TransitionComponent","AppBar","className","Toolbar","IconButton","edge","color","onClick","aria-label","Typography","Button","autoFocus","console","log","List","ListItem","button","ListItemText","primary","secondary","Divider","Box","py","px","initialOptions","speedDial","bottom","right","SpeedDial","setMode","speedDialOpen","setSpeedDialOpen","optionsOpen","setOptionsOpen","actions","icon","name","ariaLabel","SpeedDialIcon","openIcon","onOpen","action","SpeedDialAction","tooltipTitle","handleNodeSelect","modeOverride","currentMode","nextMode","initBoard","startNodePos","Math","floor","random","targetNodePos","Board","mainElement","mouseDown","setMouseDown","useEffect","row","rowIndex","onMouseDown","onMouseEnter","a","includes","onMouseLeave","getFontSize","parseFloat","getComputedStyle","fontSize","getDimensionOffset","getBoardDimensions","Promise","resolve","mainElementStyle","window","dimensionOffset","then","parseInt","getPropertyValue","range","stop","Array","_","getGrid","boardDimensions","nodeSize","numRows","ceil","numCellsPerRow","document","getElementById","App","getGridAsync","ThemeProvider","useCallback","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d7e7c1f.chunk.js","sourcesContent":["export enum MODES {\n  FILL_MODE = 1,\n  CLEAR_MODE,\n  START_NODE_MODE,\n  TARGET_NODE_MODE,\n  PATH_NODE_MODE,\n\n  DEFAULT_NODE_MODE,\n}\n\nexport interface Node {\n  x: number;\n  y: number;\n  index: number;\n  pathIndex?: number;\n  mode: MODES;\n  weight?: number;\n}\n\nexport interface PatherProps {\n  startNode: Node;\n  endNode: Node;\n  grid: Node[][];\n}\n\nexport enum Pathers {\n  Dijkstra = 'Dijkstra',\n  AStar = 'AStar'\n};\n\nexport interface Options {\n  pather: Pathers\n}\n","import { MODES } from './types';\n\nexport const WINDOW_PADDING = 4;\nexport const NODE_WIDTH = 2;\n\nexport const MODE_TOGGLE_MAP = {\n  [MODES.FILL_MODE]: MODES.CLEAR_MODE,\n  [MODES.CLEAR_MODE]: MODES.FILL_MODE,\n  [MODES.START_NODE_MODE]: MODES.START_NODE_MODE,\n  [MODES.TARGET_NODE_MODE]: MODES.TARGET_NODE_MODE,\n  [MODES.PATH_NODE_MODE]: MODES.FILL_MODE,\n  [MODES.DEFAULT_NODE_MODE]: MODES.CLEAR_MODE,\n};\n\nexport const ENTERABLE_MODES = [\n  MODES.FILL_MODE,\n  MODES.CLEAR_MODE,\n  MODES.START_NODE_MODE,\n  MODES.TARGET_NODE_MODE,\n];\n\nexport const DRAGGABLE_MODES = [MODES.START_NODE_MODE, MODES.TARGET_NODE_MODE];\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({})\n\nexport default theme\n","import styled from 'styled-components';\nimport { WINDOW_PADDING } from '../constants';\nimport theme from '../theme';\n\nconst Main = styled.main`\n  width: calc(100% - ${WINDOW_PADDING * 2}rem);\n  height: calc(100% - ${WINDOW_PADDING * 2}rem);\n  padding: ${WINDOW_PADDING}rem;\n  background-color: ${theme.palette.background.paper};\n`;\n\nexport default Main;\n","import styled, { css } from 'styled-components';\nimport { NODE_WIDTH } from '../constants';\nimport { MODES, Node } from '../types';\n\ninterface Props extends Node {}\n\nconst Cell = styled.div`\n  display: inline-block;\n  width: calc(${NODE_WIDTH}em - 0.0625rem);\n  height: calc(${NODE_WIDTH}em - 0.0625rem);\n  background-color: transparent;\n  border: 0.0625rem solid;\n  border-color: grey;\n  margin-bottom: -0.0625rem;\n  margin-right: -0.0625rem;\n  transition-property: background-color border-color;\n  transition-duration: 100ms;\n  transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);\n\n\n  ${({ mode }: Props) =>\n    mode === MODES.FILL_MODE &&\n    css`\n      background-color: black;\n      border-color: black;\n    `}\n\n  ${({ mode }: Props) =>\n    mode === MODES.START_NODE_MODE &&\n    css`\n      background-color: green;\n      border-color: green;\n    `}\n\n  ${({ mode }: Props) =>\n    mode === MODES.TARGET_NODE_MODE &&\n    css`\n      background-color: red;\n      border-color: red;\n    `}\n\n  ${({ mode, pathIndex }: Props) =>\n    mode === MODES.PATH_NODE_MODE &&\n    css`\n      transition-delay: ${(pathIndex || 0) * 60}ms;\n      background-color: yellowgreen;\n      border-color: darkgreen;\n    `}\n`;\n\nexport default Cell;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../types';\n\nconst getClearPaths = (grid: Node[][]) => {\n  const nextGrid = cloneDeep(grid);\n  const pathNodes = grid.flat().filter(node => node.mode === MODES.PATH_NODE_MODE);\n\n  pathNodes.forEach(({ x, y, index }) => {\n    nextGrid[x][y] = { x, y, index, mode: MODES.CLEAR_MODE };\n  });\n  return nextGrid;\n};\n\nexport default getClearPaths;\n","import { Node } from '../types'\n\nexport default class PriorityQueue {\n    collection: [Node, number][]\n    constructor() {\n        this.collection = [];\n    }\n\n    enqueue(element: [Node, number]) {\n        if (this.isEmpty()) {\n            this.collection.push(element);\n        } else {\n            let added = false;\n            for (let i = 1; i <= this.collection.length; i++) {\n                if (element[1] < this.collection[i - 1][1]) {\n                    this.collection.splice(i - 1, 0, element);\n                    added = true;\n                    break;\n                }\n            }\n            if (!added) {\n                this.collection.push(element);\n            }\n        }\n    };\n\n    dequeue() {\n        let value = this.collection.shift();\n        return value;\n    };\n    \n    isEmpty() {\n        return (this.collection.length === 0)\n    };\n}\n","import { MODES, Node } from '../types';\n\nconst getValidNode = (node: Node) => !!(node && node.mode !== MODES.FILL_MODE) && node;\n\nconst getNeighbors = ({ x, y }: Node, grid: Node[][], unVisited: Set<Node>): Node[] =>\n  [\n    unVisited.has(grid[x][y - 1]) && getValidNode(grid[x][y - 1]),\n    grid[x + 1] && unVisited.has(grid[x + 1][y]) && getValidNode(grid[x + 1][y]),\n    unVisited.has(grid[x][y + 1]) && getValidNode(grid[x][y + 1]),\n    grid[x - 1] && unVisited.has(grid[x - 1][y]) && getValidNode(grid[x - 1][y]),\n  ].filter(Boolean) as Node[];\n\nexport default getNeighbors;\n","import { Node, PatherProps } from '../types';\nimport PriorityQueue from '../utils/PriorityQueue';\nimport getNeighbors from '../utils/getNeighbors';\n\ninterface Props extends PatherProps { }\n\nconst dijkstra = ({ startNode, endNode, grid }: Props): Node[] => {\n  const flatGrid = grid.flat();\n  const unVisited: Set<Node> = new Set(flatGrid);\n  const tentativeDistances: number[] = flatGrid.map(({ index }) =>\n    index === startNode.index ? 0 : Infinity,\n  );\n  const trace: Map<Node, Node> = new Map();\n  const queue = new PriorityQueue();\n\n  queue.enqueue([startNode, 0]);\n\n  while (!queue.isEmpty()) {\n    const shortestStep = queue.dequeue()!;\n    const [currentNode, currentNodeDistance] = shortestStep;\n\n    if (trace.has(endNode) || !unVisited.has(currentNode)) {\n      break;\n    }\n\n    getNeighbors(currentNode, grid, unVisited).forEach(neighbor => {\n      const newTentativeDistance = currentNodeDistance + 1; // hard coded weight\n\n      if (newTentativeDistance < tentativeDistances[neighbor.index]) {\n        tentativeDistances[neighbor.index] = newTentativeDistance;\n        trace.set(neighbor, currentNode);\n        queue.enqueue([neighbor, newTentativeDistance]);\n        unVisited.delete(currentNode);\n      }\n    });\n  }\n\n  const path = [endNode];\n  let lastStep = endNode;\n\n  while (lastStep.index !== startNode.index) {\n    const lastStepTrace = trace.get(lastStep);\n    if (!lastStepTrace) {\n      break;\n    }\n    path.unshift(lastStepTrace);\n    lastStep = lastStepTrace;\n  }\n\n  return path;\n};\n\nexport default dijkstra;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node, PatherProps, Pathers } from '../types';\nimport getClearPaths from './getClearPaths';\nimport dijkstra from '../pathers/dijkstra';\n\nexport type PatherMap = {\n  [key in Pathers]: ({ startNode, endNode, grid }: PatherProps) => Node[];\n};\n\nexport const PATHER_MAP: PatherMap = {\n  [Pathers.Dijkstra]: dijkstra,\n  [Pathers.AStar]: dijkstra,\n};\n\nconst runPather = (\n  pather: Pathers,\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>,\n  startNode?: Node,\n  targetNode?: Node,\n) =>\n  startNode &&\n  targetNode &&\n  setGrid(grid => {\n    const path = PATHER_MAP[pather]({ startNode, endNode: targetNode, grid });\n    const nextGrid = cloneDeep(getClearPaths(grid));\n    let i = 0;\n\n    path.shift();\n    path.pop();\n    path.filter(Boolean).forEach(({ x, y, index }) => {\n      nextGrid[x][y] = {\n        x,\n        y,\n        index,\n        pathIndex: grid[x][y].mode === MODES.PATH_NODE_MODE ? 0 : i++,\n        mode: MODES.PATH_NODE_MODE,\n      };\n    });\n\n    return nextGrid;\n  });\n\nexport default runPather;\n","export const addEventListeners = (\n  element: HTMLElement,\n  eventNames: string[],\n  fn: () => void\n) => {\n  eventNames.forEach((e) => element.addEventListener(e, fn, false))\n}\n","import styled from 'styled-components'\n\nconst BoardSection = styled.section`\n  width: 100%;\n  height: 100%;\n  white-space: pre;\n  user-select: none;\n`\n\nexport default BoardSection\n","import styled from 'styled-components'\n\nconst BoardRow = styled.div`\n  margin-top: -0.25rem;\n`\n\nexport default BoardRow\n","/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n\ninterface SelectOption<T> {\n  label: string;\n  value: T;\n}\n\ninterface Props<T> {\n  label: string;\n  options: SelectOption<T>[];\n  onChange: (option: SelectOption<T> | null) => void;\n  value?: SelectOption<T> | null;\n}\n\nexport default function SelectField<T = string>({ label, options, onChange, value }: Props<T>) {\n  return (\n    <Autocomplete<SelectOption<T>>\n      fullWidth\n      options={options}\n      getOptionLabel={option => option.label}\n      renderInput={params => (\n        <TextField {...params} label={label} variant=\"outlined\" margin=\"normal\" />\n      )}\n      renderOption={(option, { inputValue }) => {\n        const matches = match(option.label, inputValue);\n        const parts = parse(option.label, matches);\n\n        return (\n          <div>\n            {parts.map((part, index) => (\n              <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                {part.text}\n              </span>\n            ))}\n          </div>\n        );\n      }}\n      value={value}\n      onChange={(_e, value) => onChange(value)}\n    />\n  );\n}\n","import React from 'react';\nimport { Pathers, Options } from '../../types';\nimport SelectField from '../SelectField';\n\ninterface Props {\n  options: Options;\n  setOptions: React.Dispatch<React.SetStateAction<Options>>;\n}\n\nconst selectFieldOptions = Object.entries(Pathers).map(([value, label]) => ({ label, value }));\n\nconst PatherOptions = ({ options, setOptions }: Props) => (\n  <SelectField\n    label=\"Select a path finding algorithm\"\n    options={selectFieldOptions}\n    value={selectFieldOptions.find(({ value }) => value === options.pather)}\n    onChange={option =>\n      setOptions({ ...options, pather: (option?.value as Pathers) || options.pather })\n    }\n  />\n);\n\nexport default PatherOptions;\n","import React, { useState } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport { Options } from '../types';\nimport PatherOptions from './OptionsDialog/PatherOptions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nenum Menus {\n  pather,\n}\n\ninterface Props {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  options: Options;\n  setOptions: React.Dispatch<React.SetStateAction<Options>>;\n}\n\nconst OptionsDialog = ({ open, setOpen, options, setOptions }: Props) => {\n  const classes = useStyles();\n  const [speculativeOptions, setSpeculativeOptions] = useState<Options>(options);\n  const [currentMenu, setCurrentMenu] = useState<Menus>();\n\n  const handleClose = (saveChanges = false) => {\n    if (!saveChanges) {\n      setSpeculativeOptions(options);\n    }\n    setCurrentMenu(undefined);\n    setOpen(false);\n  };\n\n  const handleSave = () => {\n    setOptions(speculativeOptions);\n    console.log(speculativeOptions);\n    handleClose(true);\n  };\n\n  return (\n    <Dialog fullScreen open={open} onClose={() => handleClose()} TransitionComponent={Transition}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={() => handleClose()} aria-label=\"close\">\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Options\n          </Typography>\n          <Button autoFocus color=\"inherit\" onClick={handleSave}>\n            save\n          </Button>\n        </Toolbar>\n      </AppBar>\n      {currentMenu === undefined && (\n        <List>\n          <ListItem button>\n            <ListItemText\n              primary=\"Pather\"\n              secondary={speculativeOptions.pather}\n              onClick={() => setCurrentMenu(Menus.pather)}\n            />\n          </ListItem>\n          <Divider />\n        </List>\n      )}\n      <Box py={2} px={3}>\n        {currentMenu === Menus.pather && (\n          <PatherOptions options={speculativeOptions} setOptions={setSpeculativeOptions} />\n        )}\n      </Box>\n    </Dialog>\n  );\n};\n\nexport default OptionsDialog;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport MuiSpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\nimport PlayArrowRoundedIcon from '@material-ui/icons/PlayArrowRounded';\nimport TrackChangesRoundedIcon from '@material-ui/icons/TrackChangesRounded';\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\nimport { MODES, Pathers, Options } from '../types';\nimport OptionsDialog from './OptionsDialog';\n\nconst initialOptions: Options = {\n  pather: Pathers.Dijkstra,\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speedDial: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  }),\n);\n\ninterface Props {\n  mode: MODES;\n  setMode: React.Dispatch<React.SetStateAction<MODES>>;\n  runPather: (pather: Pathers) => void;\n}\n\nconst SpeedDial = ({ mode, setMode, runPather }: Props) => {\n  const classes = useStyles();\n  const [speedDialOpen, setSpeedDialOpen] = React.useState(false);\n  const [optionsOpen, setOptionsOpen] = React.useState(false);\n  const [options, setOptions] = React.useState(initialOptions);\n\n  const actions = [\n    {\n      icon: <PlayArrowRoundedIcon />,\n      name: `Run ${options.pather}`,\n      onClick: () => runPather(options.pather),\n    },\n    {\n      icon: <TrackChangesRoundedIcon />,\n      name: 'Place target node',\n      onClick: () => setMode(MODES.TARGET_NODE_MODE),\n    },\n    {\n      icon: <SettingsRoundedIcon />,\n      name: 'Options',\n      onClick: () => setOptionsOpen(true),\n    },\n  ];\n\n  const handleOpen = () => {\n    setSpeedDialOpen(true);\n  };\n\n  const handleClose = () => {\n    setSpeedDialOpen(false);\n  };\n\n  return (\n    <>\n      <OptionsDialog\n        open={optionsOpen}\n        setOpen={setOptionsOpen}\n        options={options}\n        setOptions={setOptions}\n      />\n      <MuiSpeedDial\n        ariaLabel=\"SpeedDial openIcon example\"\n        className={classes.speedDial}\n        icon={<SpeedDialIcon icon={<AddRoundedIcon />} openIcon={<CloseRoundedIcon />} />}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={speedDialOpen}\n      >\n        {actions.map(action => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              handleClose();\n              action.onClick();\n            }}\n          />\n        ))}\n      </MuiSpeedDial>\n    </>\n  );\n};\n\nexport default SpeedDial;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../../types';\nimport { MODE_TOGGLE_MAP } from '../../constants';\n\ninterface PartialNode extends Omit<Node, 'index'> {\n  index?: number;\n}\n\nconst handleNodeSelect = (\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>,\n  { x, y, index, mode: currentMode }: PartialNode,\n  modeOverride?: MODES | false,\n) => {\n  const nextMode = modeOverride || MODE_TOGGLE_MAP[currentMode];\n  setGrid(grid => {\n    const nextGrid = cloneDeep(grid);\n    nextGrid[x][y] = {\n      x,\n      y,\n      index: index === undefined ? nextGrid[x][y].index : index,\n      mode: nextMode,\n    };\n    return nextGrid;\n  });\n  return nextMode;\n};\n\nexport default handleNodeSelect;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../../types';\n\nconst initBoard = (grid: Node[][], setGrid: React.Dispatch<React.SetStateAction<Node[][]>>) => {\n  const flatGrid = grid.flat();\n  let startNode;\n  let targetNode;\n\n  if (flatGrid.length > 1) {\n    startNode = flatGrid.find(node => node.mode === MODES.START_NODE_MODE);\n    targetNode = flatGrid.find(node => node.mode === MODES.TARGET_NODE_MODE);\n\n    if (!startNode) {\n      const startNodePos = {\n        x: Math.floor(Math.random() * grid.length),\n        y: Math.floor(Math.random() * grid[0].length),\n      };\n      startNode = {\n        ...grid[startNodePos.x][startNodePos.y],\n        ...startNodePos,\n        mode: MODES.START_NODE_MODE,\n      };\n    }\n\n    if (!targetNode) {\n      const targetNodePos = {\n        x: Math.floor(Math.random() * grid.length),\n        y: Math.floor(Math.random() * grid[0].length),\n      };\n\n      while (startNode && startNode.x === targetNodePos.x && startNode.y === targetNodePos.y) {\n        targetNodePos.x = Math.floor(Math.random() * grid.length);\n        targetNodePos.y = Math.floor(Math.random() * grid[0].length);\n      }\n      targetNode = {\n        ...grid[targetNodePos.x][targetNodePos.y],\n        ...targetNodePos,\n        mode: MODES.TARGET_NODE_MODE,\n      };\n    }\n    const nextGrid = cloneDeep(grid);\n    nextGrid[startNode.x][startNode.y] = startNode;\n    nextGrid[targetNode.x][targetNode.y] = targetNode;\n\n    setGrid(nextGrid);\n  }\n  return { startNode, targetNode };\n};\n\nexport default initBoard;\n","import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport runPather from '../utils/runPather';\nimport { addEventListeners } from '../utils';\nimport BoardSection from './BoardSection';\nimport BoardRow from './BoardRow';\nimport { MODES, Node, Pathers } from '../types';\nimport { MODE_TOGGLE_MAP, ENTERABLE_MODES, DRAGGABLE_MODES } from '../constants';\nimport SpeedDial from './SpeedDial';\nimport handleNodeSelect from './Board/handleNodeSelect';\nimport initBoard from './Board/initBoard';\n\ninterface Props {\n  grid: Node[][];\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>;\n  mainElement: HTMLElement | null;\n}\n\nconst Board = ({ grid, setGrid, mainElement }: Props) => {\n  const [mouseDown, setMouseDown] = useState(false);\n  const [mode, setMode] = useState(MODES.DEFAULT_NODE_MODE);\n\n  useEffect(() => {\n    if (mainElement) {\n      addEventListeners(mainElement, ['mousedown', 'touchstart'], () => setMouseDown(true));\n      addEventListeners(mainElement, ['mouseup', 'touchend'], () => {\n        setMouseDown(false);\n        setMode(MODES.DEFAULT_NODE_MODE);\n      });\n    }\n  }, [mainElement]);\n\n  const flatGrid = grid.flat();\n  const startNode = flatGrid.find(node => node.mode === MODES.START_NODE_MODE);\n  const targetNode = flatGrid.find(node => node.mode === MODES.TARGET_NODE_MODE);\n\n  useEffect(() => {\n    if (!startNode && !targetNode) {\n      initBoard(grid, setGrid);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [grid, setGrid]);\n\n  return (\n    <BoardSection>\n      {grid &&\n        grid.map((row, rowIndex) => (\n          <BoardRow key={rowIndex}>\n            {row.map(node => (\n              <Cell\n                {...node}\n                key={node.index}\n                onMouseDown={() =>\n                  setMode(\n                    handleNodeSelect(\n                      setGrid,\n                      node,\n                      mode === MODES.DEFAULT_NODE_MODE ? MODE_TOGGLE_MAP[node.mode] : mode,\n                    ),\n                  )\n                }\n                onMouseEnter={async () =>\n                  mouseDown &&\n                  handleNodeSelect(setGrid, node, ENTERABLE_MODES.includes(mode) && mode)\n                }\n                onMouseLeave={async () =>\n                  mouseDown &&\n                  DRAGGABLE_MODES.includes(mode) &&\n                  handleNodeSelect(setGrid, node, MODES.CLEAR_MODE)\n                }\n              />\n            ))}\n          </BoardRow>\n        ))}\n      <SpeedDial\n        mode={mode}\n        setMode={setMode}\n        runPather={(pather: Pathers) => {\n          runPather(pather, setGrid, startNode, targetNode);\n        }}\n      />\n    </BoardSection>\n  );\n};\n\nexport default Board;\n","import { WINDOW_PADDING } from \"../constants\"\n\nexport const getFontSize = (mainElement: HTMLElement | null) => mainElement ? parseFloat(getComputedStyle(mainElement).fontSize) : 16\n\nconst getDimensionOffset = (mainElement: HTMLElement) => WINDOW_PADDING * getFontSize(mainElement) * 2\n\nconst getBoardDimensions = (mainElement: HTMLElement | null): Promise<[number, number]> => mainElement ?\n    Promise.resolve({ mainElementStyle: window.getComputedStyle(mainElement), dimensionOffset: getDimensionOffset(mainElement) }).then(({ mainElementStyle, dimensionOffset }) => [\n        parseInt(mainElementStyle.getPropertyValue('width')) - dimensionOffset,\n        parseInt(mainElementStyle.getPropertyValue('height')) - dimensionOffset,\n    ]) : Promise.resolve([0, 0])\n\nexport default getBoardDimensions;","\nconst range = (stop: number) => [...Array<number>(stop)].map((_, i) => i)\n\nexport default range","import getBoardDimensions, { getFontSize } from './getBoardDimentions';\nimport { NODE_WIDTH } from '../constants';\nimport { Node, MODES } from '../types';\nimport range from './range';\n\nconst getGrid = async (mainElement: HTMLElement | null): Promise<Node[][]> => {\n  const boardDimensions = await getBoardDimensions(mainElement);\n  const fontSize = getFontSize(mainElement);\n  const nodeSize = NODE_WIDTH * fontSize;\n  const numRows = Math.ceil(boardDimensions[1] / nodeSize);\n  const numCellsPerRow = Math.ceil(boardDimensions[0] / nodeSize);\n\n  return range(numRows).map(rowIndex =>\n    range(numCellsPerRow).map(index => ({\n      x: rowIndex,\n      y: index,\n      index: rowIndex * numCellsPerRow + index,\n      mode: MODES.CLEAR_MODE,\n    })),\n  );\n};\n\nexport default getGrid;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider } from '@material-ui/core';\nimport Main from './components/Main';\nimport Board from './components/Board';\nimport theme from './theme';\nimport { Node } from './types';\nimport getGrid from './utils/getGrid';\n\nconst mainElement = document.getElementById('root');\n\nconst App = () => {\n  const [grid, setGrid] = useState<Node[][]>([[]]);\n\n  useEffect(() => {\n    const getGridAsync = async () => setGrid(await getGrid(mainElement));\n    getGridAsync();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Main>\n        <Board\n          grid={grid}\n          setGrid={useCallback(setGrid, [mainElement])}\n          mainElement={mainElement}\n        />\n      </Main>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}