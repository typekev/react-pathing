{"version":3,"sources":["types.ts","constants.ts","components/Main.ts","components/Cell.ts","utils.ts","components/BoardSection.ts","components/BoardRow.ts","components/SpeedDial.tsx","components/Board/handleNodeSelect.ts","components/Board/initBoard.ts","utils/getClearPaths.ts","utils/PriorityQueue.ts","utils/getNeighbors.ts","utils/runPather.ts","pathers/dijkstra.ts","components/Board.tsx","theme.ts","utils/getBoardDimentions.ts","utils/range.ts","utils/getGrid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MODES","MODE_TOGGLE_MAP","FILL_MODE","CLEAR_MODE","START_NODE_MODE","TARGET_NODE_MODE","PATH_NODE_MODE","DEFAULT_NODE_MODE","ENTERABLE_MODES","DRAGGABLE_MODES","Main","styled","main","WINDOW_PADDING","Cell","div","mode","css","pathIndex","addEventListeners","element","eventNames","fn","forEach","e","addEventListener","BoardSection","section","BoardRow","useStyles","makeStyles","theme","createStyles","speedDial","position","bottom","spacing","right","SpeedDial","setMode","runPather","classes","React","useState","open","setOpen","actions","icon","name","onClick","handleClose","ariaLabel","className","SpeedDialIcon","openIcon","onClose","onOpen","map","action","SpeedDialAction","key","tooltipTitle","handleNodeSelect","setGrid","modeOverride","x","y","index","currentMode","nextMode","grid","nextGrid","cloneDeep","undefined","initBoard","startNode","targetNode","flatGrid","flat","length","find","node","startNodePos","Math","floor","random","targetNodePos","getClearPaths","filter","PriorityQueue","collection","this","isEmpty","push","added","i","splice","shift","getValidNode","getNeighbors","unVisited","has","Boolean","PATHER_MAP","dijkstra","endNode","Set","tentativeDistances","Infinity","trace","Map","queue","enqueue","currentNode","dequeue","neighbor","newTentativeDistance","set","delete","path","lastStep","lastStepTrace","get","unshift","pather","pop","Board","mainElement","mouseDown","setMouseDown","useEffect","row","rowIndex","onMouseDown","onMouseEnter","a","includes","onMouseLeave","createMuiTheme","getFontSize","parseFloat","getComputedStyle","fontSize","getDimensionOffset","getBoardDimensions","Promise","resolve","mainElementStyle","window","dimensionOffset","then","parseInt","getPropertyValue","range","stop","Array","_","getGrid","boardDimensions","nodeSize","numRows","numCellsPerRow","document","getElementById","App","getGridAsync","ThemeProvider","useCallback","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48a1eee3.chunk.js","sourcesContent":["export enum MODES {\n  FILL_MODE = 1,\n  CLEAR_MODE,\n  START_NODE_MODE,\n  TARGET_NODE_MODE,\n  PATH_NODE_MODE,\n\n  DEFAULT_NODE_MODE,\n}\n\nexport interface Node {\n  x: number;\n  y: number;\n  index: number;\n  pathIndex?: number;\n  mode: MODES;\n}\n\nexport interface PatherProps {\n  startNode: Node;\n  endNode: Node;\n  grid: Node[][];\n}\n\nexport type Pathers = 'dijkstra';\n","import { MODES } from './types';\n\nexport const WINDOW_PADDING = 4;\nexport const NODE_WIDTH = 2;\n\nexport const MODE_TOGGLE_MAP = {\n  [MODES.FILL_MODE]: MODES.CLEAR_MODE,\n  [MODES.CLEAR_MODE]: MODES.FILL_MODE,\n  [MODES.START_NODE_MODE]: MODES.START_NODE_MODE,\n  [MODES.TARGET_NODE_MODE]: MODES.TARGET_NODE_MODE,\n  [MODES.PATH_NODE_MODE]: MODES.FILL_MODE,\n  [MODES.DEFAULT_NODE_MODE]: MODES.CLEAR_MODE,\n};\n\nexport const ENTERABLE_MODES = [\n  MODES.FILL_MODE,\n  MODES.CLEAR_MODE,\n  MODES.START_NODE_MODE,\n  MODES.TARGET_NODE_MODE,\n];\n\nexport const DRAGGABLE_MODES = [MODES.START_NODE_MODE, MODES.TARGET_NODE_MODE];\n","import styled from 'styled-components'\nimport { WINDOW_PADDING } from '../constants'\n\nconst Main = styled.main`\n  width: calc(100% - ${WINDOW_PADDING * 2}rem);\n  height: calc(100% - ${WINDOW_PADDING * 2}rem);\n  padding: ${WINDOW_PADDING}rem;\n`\n\nexport default Main\n","import styled, { css } from 'styled-components';\nimport { NODE_WIDTH } from '../constants';\nimport { MODES, Node } from '../types';\n\ninterface Props extends Node {}\n\nconst Cell = styled.div`\n  display: inline-block;\n  width: calc(${NODE_WIDTH}em - 0.0625rem);\n  height: calc(${NODE_WIDTH}em - 0.0625rem);\n  background-color: white;\n  border: 0.0625rem solid;\n  border-color: grey;\n  margin-bottom: -0.0625rem;\n  margin-right: -0.0625rem;\n  transition-property: background-color border-color;\n  transition-duration: 100ms;\n  transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);\n\n\n  ${({ mode }: Props) =>\n    mode === MODES.FILL_MODE &&\n    css`\n      background-color: black;\n      border-color: black;\n    `}\n\n  ${({ mode }: Props) =>\n    mode === MODES.START_NODE_MODE &&\n    css`\n      background-color: green;\n      border-color: green;\n    `}\n\n  ${({ mode }: Props) =>\n    mode === MODES.TARGET_NODE_MODE &&\n    css`\n      background-color: red;\n      border-color: red;\n    `}\n\n  ${({ mode, pathIndex }: Props) =>\n    mode === MODES.PATH_NODE_MODE &&\n    css`\n      transition-delay: ${(pathIndex || 0) * 60}ms;\n      background-color: yellowgreen;\n      border-color: darkgreen;\n    `}\n`;\n\nexport default Cell;\n","export const addEventListeners = (\n  element: HTMLElement,\n  eventNames: string[],\n  fn: () => void\n) => {\n  eventNames.forEach((e) => element.addEventListener(e, fn, false))\n}\n","import styled from 'styled-components'\n\nconst BoardSection = styled.section`\n  width: 100%;\n  height: 100%;\n  white-space: pre;\n  user-select: none;\n`\n\nexport default BoardSection\n","import styled from 'styled-components'\n\nconst BoardRow = styled.div`\n  margin-top: -0.25rem;\n`\n\nexport default BoardRow\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport MuiSpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\nimport TrackChangesRoundedIcon from '@material-ui/icons/TrackChangesRounded';\nimport PlayArrowRoundedIcon from '@material-ui/icons/PlayArrowRounded';\nimport { MODES, Pathers } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speedDial: {\n      position: 'absolute',\n      bottom: theme.spacing(4),\n      right: theme.spacing(4),\n    },\n  }),\n);\n\ninterface Props {\n  mode: MODES;\n  setMode: React.Dispatch<React.SetStateAction<MODES>>;\n  runPather: (pather: Pathers) => void;\n}\n\nconst SpeedDial = ({ mode, setMode, runPather }: Props) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const actions = [\n    {\n      icon: <TrackChangesRoundedIcon />,\n      name: 'Place target node',\n      onClick: () => setMode(MODES.TARGET_NODE_MODE),\n    },\n    {\n      icon: <PlayArrowRoundedIcon />,\n      name: 'Run dijkstra',\n      onClick: () => runPather('dijkstra'),\n    },\n  ];\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <MuiSpeedDial\n      ariaLabel=\"SpeedDial openIcon example\"\n      className={classes.speedDial}\n      icon={<SpeedDialIcon icon={<AddRoundedIcon />} openIcon={<CloseRoundedIcon />} />}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      open={open}\n    >\n      {actions.map(action => (\n        <SpeedDialAction\n          key={action.name}\n          icon={action.icon}\n          tooltipTitle={action.name}\n          onClick={() => {\n            handleClose();\n            action.onClick();\n          }}\n        />\n      ))}\n    </MuiSpeedDial>\n  );\n};\n\nexport default SpeedDial;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../../types';\nimport { MODE_TOGGLE_MAP } from '../../constants';\n\ninterface PartialNode extends Omit<Node, 'index'> {\n  index?: number;\n}\n\nconst handleNodeSelect = (\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>,\n  { x, y, index, mode: currentMode }: PartialNode,\n  modeOverride?: MODES | false,\n) => {\n  const nextMode = modeOverride || MODE_TOGGLE_MAP[currentMode];\n  setGrid(grid => {\n    const nextGrid = cloneDeep(grid);\n    nextGrid[x][y] = {\n      x,\n      y,\n      index: index === undefined ? nextGrid[x][y].index : index,\n      mode: nextMode,\n    };\n    return nextGrid;\n  });\n  return nextMode;\n};\n\nexport default handleNodeSelect;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../../types';\n\nconst initBoard = (grid: Node[][], setGrid: React.Dispatch<React.SetStateAction<Node[][]>>) => {\n  const flatGrid = grid.flat();\n  let startNode;\n  let targetNode;\n\n  if (flatGrid.length > 1) {\n    startNode = flatGrid.find(node => node.mode === MODES.START_NODE_MODE);\n    targetNode = flatGrid.find(node => node.mode === MODES.TARGET_NODE_MODE);\n\n    if (!startNode) {\n      const startNodePos = {\n        x: Math.floor(Math.random() * grid.length),\n        y: Math.floor(Math.random() * grid[0].length),\n      };\n      startNode = {\n        ...grid[startNodePos.x][startNodePos.y],\n        ...startNodePos,\n        mode: MODES.START_NODE_MODE,\n      };\n    }\n\n    if (!targetNode) {\n      const targetNodePos = {\n        x: Math.floor(Math.random() * grid.length),\n        y: Math.floor(Math.random() * grid[0].length),\n      };\n\n      while (startNode && startNode.x === targetNodePos.x && startNode.y === targetNodePos.y) {\n        targetNodePos.x = Math.floor(Math.random() * grid.length);\n        targetNodePos.y = Math.floor(Math.random() * grid[0].length);\n      }\n      targetNode = {\n        ...grid[targetNodePos.x][targetNodePos.y],\n        ...targetNodePos,\n        mode: MODES.TARGET_NODE_MODE,\n      };\n    }\n    const nextGrid = cloneDeep(grid);\n    nextGrid[startNode.x][startNode.y] = startNode;\n    nextGrid[targetNode.x][targetNode.y] = targetNode;\n\n    setGrid(nextGrid);\n  }\n  return { startNode, targetNode };\n};\n\nexport default initBoard;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node } from '../types';\n\nconst getClearPaths = (grid: Node[][]) => {\n  const nextGrid = cloneDeep(grid);\n  const pathNodes = grid.flat().filter(node => node.mode === MODES.PATH_NODE_MODE);\n\n  pathNodes.forEach(({ x, y, index }) => {\n    nextGrid[x][y] = { x, y, index, mode: MODES.CLEAR_MODE };\n  });\n  return nextGrid;\n};\n\nexport default getClearPaths;\n","import { Node } from '../types'\n\nexport default class PriorityQueue {\n    collection: [Node, number][]\n    constructor() {\n        this.collection = [];\n    }\n\n    enqueue(element: [Node, number]) {\n        if (this.isEmpty()) {\n            this.collection.push(element);\n        } else {\n            let added = false;\n            for (let i = 1; i <= this.collection.length; i++) {\n                if (element[1] < this.collection[i - 1][1]) {\n                    this.collection.splice(i - 1, 0, element);\n                    added = true;\n                    break;\n                }\n            }\n            if (!added) {\n                this.collection.push(element);\n            }\n        }\n    };\n\n    dequeue() {\n        let value = this.collection.shift();\n        return value;\n    };\n    \n    isEmpty() {\n        return (this.collection.length === 0)\n    };\n}\n","import { MODES, Node } from '../types';\n\nconst getValidNode = (node: Node) => !!(node && node.mode !== MODES.FILL_MODE) && node;\n\nconst getNeighbors = ({ x, y }: Node, grid: Node[][], unVisited: Set<Node>): Node[] =>\n  [\n    unVisited.has(grid[x][y - 1]) && getValidNode(grid[x][y - 1]),\n    grid[x + 1] && unVisited.has(grid[x + 1][y]) && getValidNode(grid[x + 1][y]),\n    unVisited.has(grid[x][y + 1]) && getValidNode(grid[x][y + 1]),\n    grid[x - 1] && unVisited.has(grid[x - 1][y]) && getValidNode(grid[x - 1][y]),\n  ].filter(Boolean) as Node[];\n\nexport default getNeighbors;\n","import cloneDeep from 'lodash.clonedeep';\nimport { MODES, Node, PatherProps, Pathers } from '../types';\nimport getClearPaths from './getClearPaths';\nimport dijkstra from '../pathers/dijkstra';\n\nexport type PatherMap = {\n  [key in Pathers]: ({ startNode, endNode, grid }: PatherProps) => Node[];\n};\n\nexport const PATHER_MAP: PatherMap = {\n  dijkstra,\n};\n\nconst runPather = (\n  pather: Pathers,\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>,\n  startNode?: Node,\n  targetNode?: Node,\n) =>\n  startNode &&\n  targetNode &&\n  setGrid(grid => {\n    const path = PATHER_MAP[pather]({ startNode, endNode: targetNode, grid });\n    const nextGrid = cloneDeep(getClearPaths(grid));\n    let i = 0;\n\n    path.shift();\n    path.pop();\n    path.filter(Boolean).forEach(({ x, y, index }) => {\n      nextGrid[x][y] = {\n        x,\n        y,\n        index,\n        pathIndex: grid[x][y].mode === MODES.PATH_NODE_MODE ? 0 : i++,\n        mode: MODES.PATH_NODE_MODE,\n      };\n    });\n\n    return nextGrid;\n  });\n\nexport default runPather;\n","import { Node, PatherProps } from '../types';\nimport PriorityQueue from '../utils/PriorityQueue';\nimport getNeighbors from '../utils/getNeighbors';\n\ninterface Props extends PatherProps {}\n\nconst dijkstra = ({ startNode, endNode, grid }: Props): Node[] => {\n  const flatGrid = grid.flat();\n  const unVisited: Set<Node> = new Set(flatGrid);\n  const tentativeDistances: number[] = flatGrid.map(({ index }) =>\n    index === startNode.index ? 0 : Infinity,\n  );\n  const trace: Map<Node, Node> = new Map();\n  const queue = new PriorityQueue();\n\n  queue.enqueue([startNode, 0]);\n\n  while (!queue.isEmpty()) {\n    const shortestStep = queue.dequeue()!;\n    const currentNode = shortestStep[0];\n\n    if (trace.has(endNode) || !unVisited.has(currentNode)) {\n      break;\n    }\n\n    getNeighbors(currentNode, grid, unVisited).forEach(neighbor => {\n      const newTentativeDistance = tentativeDistances[currentNode.index] + 1; // hard coded weight\n\n      if (newTentativeDistance < tentativeDistances[neighbor.index]) {\n        tentativeDistances[neighbor.index] = newTentativeDistance;\n        trace.set(neighbor, currentNode);\n        queue.enqueue([neighbor, newTentativeDistance]);\n        unVisited.delete(currentNode);\n      }\n    });\n  }\n\n  const path = [endNode];\n  let lastStep = endNode;\n\n  while (lastStep.index !== startNode.index) {\n    const lastStepTrace = trace.get(lastStep);\n    if (!lastStepTrace) {\n      break;\n    }\n    path.unshift(lastStepTrace);\n    lastStep = lastStepTrace;\n  }\n\n  return path;\n};\n\nexport default dijkstra;\n","import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { addEventListeners } from '../utils';\nimport BoardSection from './BoardSection';\nimport BoardRow from './BoardRow';\nimport { MODES, Node, Pathers } from '../types';\nimport { MODE_TOGGLE_MAP, ENTERABLE_MODES, DRAGGABLE_MODES } from '../constants';\nimport SpeedDial from './SpeedDial';\nimport handleNodeSelect from './Board/handleNodeSelect';\nimport initBoard from './Board/initBoard';\nimport runPather from '../utils/runPather';\n\ninterface Props {\n  grid: Node[][];\n  setGrid: React.Dispatch<React.SetStateAction<Node[][]>>;\n  mainElement: HTMLElement | null;\n}\n\nconst Board = ({ grid, setGrid, mainElement }: Props) => {\n  const [mouseDown, setMouseDown] = useState(false);\n  const [mode, setMode] = useState(MODES.DEFAULT_NODE_MODE);\n\n  useEffect(() => {\n    if (mainElement) {\n      addEventListeners(mainElement, ['mousedown', 'touchstart'], () => setMouseDown(true));\n      addEventListeners(mainElement, ['mouseup', 'touchend'], () => {\n        setMouseDown(false);\n        setMode(MODES.DEFAULT_NODE_MODE);\n      });\n    }\n  }, [mainElement]);\n\n  const flatGrid = grid.flat();\n  const startNode = flatGrid.find(node => node.mode === MODES.START_NODE_MODE);\n  const targetNode = flatGrid.find(node => node.mode === MODES.TARGET_NODE_MODE);\n  // const pathNode = flatGrid.find(node => node.mode === MODES.PATH_NODE_MODE);\n\n  useEffect(() => {\n    if (!startNode && !targetNode) {\n      initBoard(grid, setGrid);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [grid, setGrid]);\n\n  return (\n    <BoardSection>\n      {grid &&\n        grid.map((row, rowIndex) => (\n          <BoardRow key={rowIndex}>\n            {row.map(node => (\n              <Cell\n                {...node}\n                key={node.index}\n                onMouseDown={() =>\n                  setMode(\n                    handleNodeSelect(\n                      setGrid,\n                      node,\n                      mode === MODES.DEFAULT_NODE_MODE ? MODE_TOGGLE_MAP[node.mode] : mode,\n                    ),\n                  )\n                }\n                onMouseEnter={async () =>\n                  mouseDown &&\n                  handleNodeSelect(setGrid, node, ENTERABLE_MODES.includes(mode) && mode)\n                }\n                onMouseLeave={async () =>\n                  mouseDown &&\n                  DRAGGABLE_MODES.includes(mode) &&\n                  handleNodeSelect(setGrid, node, MODES.CLEAR_MODE)\n                }\n              />\n            ))}\n          </BoardRow>\n        ))}\n      <SpeedDial\n        mode={mode}\n        setMode={setMode}\n        runPather={(pather: Pathers) => {\n          runPather(pather, setGrid, startNode, targetNode);\n        }}\n      />\n    </BoardSection>\n  );\n};\n\nexport default Board;\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({})\n\nexport default theme\n","import { WINDOW_PADDING } from \"../constants\"\n\nexport const getFontSize = (mainElement: HTMLElement | null) => mainElement ? parseFloat(getComputedStyle(mainElement).fontSize) : 16\n\nconst getDimensionOffset = (mainElement: HTMLElement) => WINDOW_PADDING * getFontSize(mainElement) * 2\n\nconst getBoardDimensions = (mainElement: HTMLElement | null): Promise<[number, number]> => mainElement ?\n    Promise.resolve({ mainElementStyle: window.getComputedStyle(mainElement), dimensionOffset: getDimensionOffset(mainElement) }).then(({ mainElementStyle, dimensionOffset }) => [\n        parseInt(mainElementStyle.getPropertyValue('width')) - dimensionOffset,\n        parseInt(mainElementStyle.getPropertyValue('height')) - dimensionOffset,\n    ]) : Promise.resolve([0, 0])\n\nexport default getBoardDimensions;","\nconst range = (stop: number) => [...Array<number>(stop)].map((_, i) => i)\n\nexport default range","import getBoardDimensions, { getFontSize } from './getBoardDimentions';\nimport { NODE_WIDTH } from '../constants';\nimport { Node, MODES } from '../types';\nimport range from './range';\n\nconst getGrid = async (mainElement: HTMLElement | null): Promise<Node[][]> => {\n  const boardDimensions = await getBoardDimensions(mainElement);\n  const fontSize = getFontSize(mainElement);\n  const nodeSize = NODE_WIDTH * fontSize;\n  const numRows = Math.floor(boardDimensions[1] / nodeSize);\n  const numCellsPerRow = Math.floor(boardDimensions[0] / nodeSize);\n\n  return range(numRows).map(rowIndex =>\n    range(numCellsPerRow).map(index => ({\n      x: rowIndex,\n      y: index,\n      index: rowIndex * numCellsPerRow + index,\n      mode: MODES.CLEAR_MODE,\n    })),\n  );\n};\n\nexport default getGrid;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider } from '@material-ui/core';\nimport Main from './components/Main';\nimport Board from './components/Board';\nimport theme from './theme';\nimport { Node } from './types';\nimport getGrid from './utils/getGrid';\n\nconst mainElement = document.getElementById('root');\n\nconst App = () => {\n  const [grid, setGrid] = useState<Node[][]>([[]]);\n\n  useEffect(() => {\n    const getGridAsync = async () => setGrid(await getGrid(mainElement));\n    getGridAsync();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Main>\n        <Board\n          grid={grid}\n          setGrid={useCallback(setGrid, [mainElement])}\n          mainElement={mainElement}\n        />\n      </Main>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}